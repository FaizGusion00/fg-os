name: FG-OS CI/CD Pipeline

# CI/CD Pipeline for FG-OS
# Developed by: Faiz Nasir - FGCompany Official
# Description: Automated build, test, and deployment pipeline

on:
  push:
    branches: [ main, develop, phase-* ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run nightly builds at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PROJECT_NAME: FG-OS
  PROJECT_VERSION: 1.0.0
  CURRENT_PHASE: 2

jobs:
  # Phase validation job
  validate-phase:
    runs-on: ubuntu-latest
    name: Validate Development Phase
    outputs:
      phase: ${{ steps.check-phase.outputs.phase }}
      phase-name: ${{ steps.check-phase.outputs.phase-name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check current phase
        id: check-phase
        run: |
          PHASE=$(grep "CURRENT_PHASE" CMakeLists.txt | cut -d'"' -f2)
          echo "phase=$PHASE" >> $GITHUB_OUTPUT
          
                     case $PHASE in
             1) PHASE_NAME="Research & Requirements Analysis" ;;
             2) PHASE_NAME="Development Environment Setup" ;;
             3) PHASE_NAME="Bootloader Development" ;;
             4) PHASE_NAME="Kernel Architecture Design" ;;
             *) PHASE_NAME="Unknown Phase" ;;
           esac
          echo "phase-name=$PHASE_NAME" >> $GITHUB_OUTPUT
          
          echo "Current Phase: $PHASE - $PHASE_NAME"

  # Build matrix for different environments
  build-matrix:
    needs: validate-phase
    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-22.04, ubuntu-20.04]
        compiler: [gcc, clang]
        build-type: [Debug, Release]
        exclude:
          # Exclude some combinations to speed up CI
          - os: ubuntu-20.04
            compiler: clang
            build-type: Release
    
    runs-on: ${{ matrix.os }}
    name: Build (${{ matrix.os }}, ${{ matrix.compiler }}, ${{ matrix.build-type }})
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            nasm \
            mtools \
            xorriso \
            grub-pc-bin \
            grub-common \
            qemu-system-x86 \
            qemu-utils \
            gdb \
            python3 \
            python3-pip \
            doxygen \
            graphviz \
            clang \
            clang-format \
            valgrind \
            libsdl2-dev \
            libgl1-mesa-dev \
            libglu1-mesa-dev
            
      - name: Setup cross-compiler (Phase 2+)
        if: needs.validate-phase.outputs.phase >= 2
        run: |
          echo "Setting up cross-compiler for Phase ${{ needs.validate-phase.outputs.phase }}"
          # For now, we'll use the system compiler
          # Later phases will implement full cross-compilation
          
      - name: Configure CMake
        run: |
          cmake -B build \
            -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} \
            -DCMAKE_C_COMPILER=${{ matrix.compiler }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.compiler == 'gcc' && 'g++' || 'clang++' }} \
            -DCURRENT_PHASE=${{ needs.validate-phase.outputs.phase }} \
            -DBUILD_TESTS=ON \
            .
            
      - name: Build project
        run: |
          cmake --build build --parallel $(nproc)
          
      - name: Run tests
        run: |
          cd build
          ctest --output-on-failure --parallel $(nproc)
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: fg-os-${{ matrix.os }}-${{ matrix.compiler }}-${{ matrix.build-type }}
          path: |
            build/kernel/
            build/tests/
          retention-days: 7

  # Code quality checks
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality Analysis
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install clang-format
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-format
          
      - name: Check code formatting
        run: |
          find . -name "*.c" -o -name "*.h" -o -name "*.cpp" -o -name "*.hpp" | \
          xargs clang-format -style=file --dry-run --Werror
          
      - name: Install cppcheck
        run: |
          sudo apt-get install -y cppcheck
          
      - name: Run static analysis
        run: |
          cppcheck --enable=all --error-exitcode=1 \
            --suppress=missingIncludeSystem \
            --inline-suppr \
            kernel/ tests/ || true
            
  # Documentation generation
  documentation:
    runs-on: ubuntu-latest
    name: Generate Documentation
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install Doxygen
        run: |
          sudo apt-get update
          sudo apt-get install -y doxygen graphviz
          
      - name: Generate documentation
        run: |
          mkdir -p docs/generated
          doxygen Doxyfile || echo "Doxygen config will be added in later phases"
          
      - name: Upload documentation
        uses: actions/upload-artifact@v3
        with:
          name: fg-os-documentation
          path: docs/
          retention-days: 30

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    name: Security Analysis
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: c, cpp
          
      - name: Build for CodeQL
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake
          cmake -B build -DCMAKE_BUILD_TYPE=Debug .
          cmake --build build
          
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # Phase-specific tests
  phase2-tests:
    if: needs.validate-phase.outputs.phase == '2'
    needs: [validate-phase, build-matrix]
    runs-on: ubuntu-latest
    name: Phase 2 Specific Tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install development tools
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential cmake nasm mtools xorriso \
            grub-pc-bin qemu-system-x86 gdb
            
      - name: Test build system configuration
        run: |
          echo "Testing Phase 2: Development Environment Setup"
          cmake -B build -DCURRENT_PHASE=2 .
          cmake --build build
          
      - name: Test cross-compiler setup (basic)
        run: |
          echo "Checking basic compiler functionality"
          gcc --version
          nasm --version
          
      - name: Test QEMU availability
        run: |
          qemu-system-x86_64 --version
          
      - name: Run Phase 2 specific tests
        run: |
          cd build
          ./tests/phase2_tests || echo "Phase 2 tests will be implemented"

  # Integration tests
  integration-tests:
    needs: [validate-phase, build-matrix]
    runs-on: ubuntu-latest
    name: Integration Tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: fg-os-ubuntu-latest-gcc-Debug
          path: build/
          
      - name: Make executables runnable
        run: |
          find build/ -type f -executable -exec chmod +x {} \;
          
      - name: Run integration tests
        run: |
          echo "Running integration tests for Phase ${{ needs.validate-phase.outputs.phase }}"
          # Integration tests will be implemented as phases progress

  # Deployment (for later phases)
  deploy:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [validate-phase, build-matrix, code-quality, security-scan]
    runs-on: ubuntu-latest
    name: Deploy Artifacts
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Create release artifacts
        run: |
          mkdir -p release
          echo "FG-OS Phase ${{ needs.validate-phase.outputs.phase }} Release" > release/README.txt
          echo "Build Date: $(date)" >> release/README.txt
          echo "Commit: ${{ github.sha }}" >> release/README.txt
          
      - name: Upload release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: fg-os-release-phase${{ needs.validate-phase.outputs.phase }}
          path: release/
          retention-days: 90

  # Notification job
  notify:
    if: always()
    needs: [validate-phase, build-matrix, code-quality, security-scan]
    runs-on: ubuntu-latest
    name: Build Notification
    
    steps:
      - name: Determine build status
        id: status
        run: |
          if [[ "${{ needs.build-matrix.result }}" == "success" && \
                "${{ needs.code-quality.result }}" == "success" && \
                "${{ needs.security-scan.result }}" == "success" ]]; then
            echo "status=✅ SUCCESS" >> $GITHUB_OUTPUT
            echo "color=success" >> $GITHUB_OUTPUT
          else
            echo "status=❌ FAILED" >> $GITHUB_OUTPUT
            echo "color=failure" >> $GITHUB_OUTPUT
          fi
          
      - name: Build summary
        run: |
          echo "## FG-OS Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Phase:** ${{ needs.validate-phase.outputs.phase }} - ${{ needs.validate-phase.outputs.phase-name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ steps.status.outputs.status }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Author:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Job Results:" >> $GITHUB_STEP_SUMMARY
          echo "- Build Matrix: ${{ needs.build-matrix.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Code Quality: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security Scan: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Development Progress:" >> $GITHUB_STEP_SUMMARY
          echo "Phase ${{ needs.validate-phase.outputs.phase }}/20 - Building the future of operating systems!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "_Developed by Faiz Nasir - FGCompany Official_" >> $GITHUB_STEP_SUMMARY 